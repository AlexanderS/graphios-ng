#!/usr/bin/env python

import unittest
import sys
import os


class SilentTestResult(unittest._TextTestResult):
    def _restoreStdout(self):
        self._mirrorOutput = False
        super(SilentTestResult, self)._restoreStdout()

def setup_env():
    top = os.path.join(os.path.dirname(__file__), '..')
    sys.path = [top] + sys.path

def run_tests():
    test_dir = os.path.join(os.path.dirname(__file__), '..', 'tests')
    args = [sys.argv[0], 'discover', os.path.abspath(test_dir)]

    verbosity = 1
    if any([flag in sys.argv for flag in ['-v', '--verbose']]):
        verbosity = 2

    buffered = True
    if any([flag in sys.argv for flag in ['-d', '--debug']]):
        verbosity = 2
        buffered = False

    runner = unittest.TextTestRunner(resultclass = SilentTestResult,
                                     buffer = buffered, verbosity = verbosity)
    tests = unittest.main(exit=False, testRunner=runner, argv=args)

    if len(tests.result.errors) > 0 or len(tests.result.failures) > 0:
        sys.exit(1)

if __name__ == '__main__':
    setup_env()
    run_tests()
